{"content": "User Authentication and Account Management", "description": "This 'User Authentication and Account Management' collection encompasses all endpoints related to managing user authentication and account operations. It covers user registration, login processes, token refresh, user data access with a token, and account recovery options like password reset."}
{"content": "Register user", "request": {"method": "POST", "body": {"raw": "{\"first_name\": \"Naruto\",\"last_name\": \"Uzimaki\",\"email\": \"Naruto@konoha.com\",\"password\": \"HiddenLeaf9\",\"password_confirm\": \"HiddenLeaf9\"}"}, "url": "https://{{base_url}}/api/register/", "description": "Allows new users to create an account. Requires first name, last name, email, password, and password confirmation."}}
{"content": "Fetch User", "request": {"method": "GET", "header": [{"key": "Authorization", "value": "Bearer {{access_token}}"}], "url": "https://{{base_url}}/api/validate-session/", "description": "Retrieves the authenticated user's profile information. Requires a valid access token."}}
{"content": "Login", "request": {"method": "POST", "body": {"raw": "{\"email\": \"naruto@konoha.com\",\"password\": \"HiddenLeaf9\"}"}, "url": "https://{{base_url}}/api/login/", "description": "Authenticates the user and returns authentication tokens (access and refresh tokens)."}}
{"content": "Logout", "request": {"method": "POST", "header": [{"key": "Authorization", "value": "Bearer {{access_token}}"}], "url": "https://{{base_url}}/api/logout/", "description": "Logs out the user from the application by invalidating their current access token."}}
{"content": "Forgot Password", "request": {"method": "POST", "body": {"raw": "{\"email\": \"john.doe@example.com\"}"}, "url": "https://{{base_url}}/api/forgot-password", "description": "Initiates the password reset process for users who have forgotten their password."}}
{"content": "Reset Password", "request": {"method": "POST", "body": {"raw": "{\"token\": \"validTokenExample\",\"password\": \"newStrongPassword123\",\"password_confirm\": \"newStrongPassword123\"}"}, "url": "https://{{base_url}}/api/reset-password", "description": "Allows users to reset their password using a token received via email. The request must include the token, the new password, and a confirmation of the new password."}}
{"content": "Obtain New Access Token", "request": {"method": "POST", "url": "https://{{base_url}}/api/token-refresh", "description": "Allows refreshing of the access token using a refresh token."}}
{"content": "Toggle 2FA", "request": {"method": "PATCH", "header": [{"key": "Authorization", "value": "Bearer {{access_token}}"}], "body": {"raw": "{\"is_2fa_enabled\": false}"}, "url": "https://{{base_url}}/api/user/toggle-2fa", "description": "Toggles the two-factor authentication setting for the user."}}
{"content": "RegisterAPIView", "description": "Handles user registration by validating email, passwords, and creating a new user account.", "methods": [{"name": "post", "description": "Registers a new user with email and password.", "parameters": [{"name": "email", "type": "string", "description": "User's email address."}, {"name": "password", "type": "string", "description": "User's password."}, {"name": "password_confirm", "type": "string", "description": "Password confirmation."}], "response": {"success": {"status": 201, "description": "User created successfully.", "data": {"user": "User object"}}, "errors": [{"status": 400, "description": "Validation error or email already in use."}, {"status": 500, "description": "Unexpected server error."}]}}, "error_handling": [{"error": "ValidationError", "description": "Occurs when the input data does not pass validation checks.", "solution": "Ensure email format is correct and passwords match."}, {"error": "IntegrityError", "description": "Occurs when there is a database integrity issue, such as duplicate entries.", "solution": "Check for existing users with the same email."}, {"error": "Exception", "description": "Catches any unexpected errors.", "solution": "Log the error details and provide a generic error message to the user."}]}]}
{"content": "LoginAPIView", "description": "Handles user login by validating credentials and issuing tokens.", "methods": [{"name": "post", "description": "Authenticates a user and issues JWT tokens.", "parameters": [{"name": "email", "type": "string", "description": "User's email address."}, {"name": "password", "type": "string", "description": "User's password."}], "response": {"success": {"status": 200, "description": "Logged in successfully.", "data": {"access_token": "JWT access token", "refresh_token": "JWT refresh token"}}, "errors": [{"status": 400, "description": "Email and password are required."}, {"status": 401, "description": "Invalid email or password."}, {"status": 500, "description": "Unable to create tokens."}]}}, "error_handling": [{"error": "AuthenticationFailed", "description": "Occurs when the credentials are invalid.", "solution": "Ensure the email and password are correct."}, {"error": "Exception", "description": "Catches any unexpected errors.", "solution": "Log the error details and provide a generic error message to the user."}]}]}
{"content": "TwoFactorLoginAPIView", "description": "Handles the verification of the second factor for users with 2FA enabled.", "methods": [{"name": "post", "description": "Verifies the OTP provided by the user during 2FA.", "parameters": [{"name": "otp", "type": "string", "description": "One-time password provided by the user."}], "response": {"success": {"status": 200, "description": "2FA verification successful.", "data": {"access_token": "JWT access token", "refresh_token": "JWT refresh token"}}, "errors": [{"status": 400, "description": "OTP and temporary token are required."}, {"status": 401, "description": "Invalid OTP."}, {"status": 500, "description": "Internal server error."}]}}, "error_handling": [{"error": "AuthenticationFailed", "description": "Occurs when the OTP is invalid.", "solution": "Ensure the OTP is correct."}, {"error": "Exception", "description": "Catches any unexpected errors.", "solution": "Log the error details and provide a generic error message to the user."}]}]}
{"content": "GenerateQRCodeAPIView", "description": "Generates a QR code for setting up 2FA with an authenticator app.", "methods": [{"name": "get", "description": "Generates and returns a QR code image for 2FA setup.", "parameters": [], "response": {"success": {"status": 200, "description": "QR code generated successfully.", "data": "QR code image"}, "errors": [{"status": 401, "description": "Authentication required."}]}}, "error_handling": [{"error": "AuthenticationFailed", "description": "Occurs when the user is not authenticated.", "solution": "Ensure the user is logged in."}, {"error": "Exception", "description": "Catches any unexpected errors.", "solution": "Log the error details and provide a generic error message to the user."}]}]}
{"content": "ValidateSessionAPIView", "description": "Validates the user's session based on the provided JWT token.", "methods": [{"name": "get", "description": "Validates the JWT token and returns user data.", "parameters": [], "response": {"success": {"status": 200, "description": "Session validated successfully.", "data": {"user": "User object"}}, "errors": [{"status": 401, "description": "Authentication credentials were not provided or are invalid."}]}}, "error_handling": [{"error": "AuthenticationFailed", "description": "Occurs when the token is invalid or missing.", "solution": "Ensure the JWT token is valid and provided."}, {"error": "Exception", "description": "Catches any unexpected errors.", "solution": "Log the error details and provide a generic error message to the user."}]}]}
{"content": "RefreshAPIView", "description": "Handles the refreshing of JWT tokens.", "methods": [{"name": "post", "description": "
