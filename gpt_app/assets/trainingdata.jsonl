[
    {
        "view_name": "RegisterAPIView",
        "description": "Handles user registration by validating email, passwords, and creating a new user account.",
        "methods": [
            {
                "name": "post",
                "description": "Registers a new user with email and password.",
                "parameters": [
                    {"name": "email", "type": "string", "description": "User's email address."},
                    {"name": "password", "type": "string", "description": "User's password."},
                    {"name": "password_confirm", "type": "string", "description": "Password confirmation."}
                ],
                "response": {
                    "success": {"status": 201, "description": "User created successfully.", "data": {"user": "User object"}},
                    "errors": [
                        {"status": 400, "description": "Validation error or email already in use."},
                        {"status": 500, "description": "Unexpected server error."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "ValidationError",
                "description": "Occurs when the input data does not pass validation checks.",
                "solution": "Ensure email format is correct and passwords match."
            },
            {
                "error": "IntegrityError",
                "description": "Occurs when there is a database integrity issue, such as duplicate entries.",
                "solution": "Check for existing users with the same email."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "LoginAPIView",
        "description": "Handles user login by validating credentials and issuing tokens.",
        "methods": [
            {
                "name": "post",
                "description": "Authenticates a user and issues JWT tokens.",
                "parameters": [
                    {"name": "email", "type": "string", "description": "User's email address."},
                    {"name": "password", "type": "string", "description": "User's password."}
                ],
                "response": {
                    "success": {"status": 200, "description": "Logged in successfully.", "data": {"access_token": "JWT access token", "refresh_token": "JWT refresh token"}},
                    "errors": [
                        {"status": 400, "description": "Email and password are required."},
                        {"status": 401, "description": "Invalid email or password."},
                        {"status": 500, "description": "Unable to create tokens."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the credentials are invalid.",
                "solution": "Ensure the email and password are correct."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "TwoFactorLoginAPIView",
        "description": "Handles the verification of the second factor for users with 2FA enabled.",
        "methods": [
            {
                "name": "post",
                "description": "Verifies the OTP provided by the user during 2FA.",
                "parameters": [
                    {"name": "otp", "type": "string", "description": "One-time password provided by the user."}
                ],
                "response": {
                    "success": {"status": 200, "description": "2FA verification successful.", "data": {"access_token": "JWT access token", "refresh_token": "JWT refresh token"}},
                    "errors": [
                        {"status": 400, "description": "OTP and temporary token are required."},
                        {"status": 401, "description": "Invalid OTP."},
                        {"status": 500, "description": "Internal server error."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the OTP is invalid.",
                "solution": "Ensure the OTP is correct."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "GenerateQRCodeAPIView",
        "description": "Generates a QR code for setting up 2FA with an authenticator app.",
        "methods": [
            {
                "name": "get",
                "description": "Generates and returns a QR code image for 2FA setup.",
                "parameters": [],
                "response": {
                    "success": {"status": 200, "description": "QR code generated successfully.", "data": "QR code image"},
                    "errors": [
                        {"status": 401, "description": "Authentication required."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the user is not authenticated.",
                "solution": "Ensure the user is logged in."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "ValidateSessionAPIView",
        "description": "Validates the user's session based on the provided JWT token.",
        "methods": [
            {
                "name": "get",
                "description": "Validates the JWT token and returns user data.",
                "parameters": [],
                "response": {
                    "success": {"status": 200, "description": "Session validated successfully.", "data": {"user": "User object"}},
                    "errors": [
                        {"status": 401, "description": "Authentication credentials were not provided or are invalid."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the token is invalid or missing.",
                "solution": "Ensure the JWT token is valid and provided."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "RefreshAPIView",
        "description": "Handles the refreshing of JWT tokens.",
        "methods": [
            {
                "name": "post",
                "description": "Refreshes the JWT token using the provided refresh token.",
                "parameters": [
                    {"name": "Authorization", "type": "string", "description": "Bearer token containing the refresh token."}
                ],
                "response": {
                    "success": {"status": 200, "description": "Token refreshed successfully.", "data": {"access_token": "New JWT access token"}},
                    "errors": [
                        {"status": 401, "description": "Refresh token not found in headers or invalid."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the refresh token is invalid or expired.",
                "solution": "Ensure the refresh token is valid and not expired."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "LogoutAPIView",
        "description": "Handles user logout by deleting the refresh token.",
        "methods": [
            {
                "name": "post",
                "description": "Logs out the user and deletes the refresh token.",
                "parameters": [],
                "response": {
                    "success": {"status": 200, "description": "Signed out successfully.", "data": {"message": "Signed out"}},
                    "errors": []
                }
            }
        ],
        "error_handling": [
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "ForgotPasswordRequestView",
        "description": "Handles password reset requests by sending a password reset email.",
        "methods": [
            {
                "name": "post",
                "description": "Sends a password reset email to the provided email address.",
                "parameters": [
                    {"name": "email", "type": "string", "description": "User's email address."}
                ],
                "response": {
                    "success": {"status": 200, "description": "Password reset email sent.", "data": {"message": "Password reset email sent."}},
                    "errors": [
                        {"status": 400, "description": "Email field is required."},
                        {"status": 500, "description": "Failed to send password reset email."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "ObjectDoesNotExist",
                "description": "Occurs when the email is not registered.",
                "solution": "Do not reveal whether the email address exists to protect user privacy."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "ResetPasswordRequestView",
        "description": "Handles the reset of user passwords using a token.",
        "methods": [
            {
                "name": "post",
                "description": "Resets the user's password using the provided token.",
                "parameters": [
                    {"name": "password", "type": "string", "description": "New password."},
                    {"name": "password_confirm", "type": "string", "description": "Password confirmation."},
                    {"name": "token", "type": "string", "description": "Password reset token."}
                ],
                "response": {
                    "success": {"status": 202, "description": "Password updated successfully.", "data": {"message": "Password updated"}},
                    "errors": [
                        {"status": 400, "description": "Password, Password confirmation, and token are required."},
                        {"status": 400, "description": "Passwords do not match."},
                        {"status": 400, "description": "Invalid password format."},
                        {"status": 500, "description": "Unexpected server error."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "ValidationError",
                "description": "Occurs when the input data does not pass validation checks.",
                "solution": "Ensure the password format is correct and passwords match."
            },
            {
                "error": "ObjectDoesNotExist",
                "description": "Occurs when the token or email is invalid.",
                "solution": "Ensure the token is valid and the email is registered."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "Toggle2FAAPIView",
        "description": "Toggles the 2FA status for a user.",
        "methods": [
            {
                "name": "patch",
                "description": "Enables or disables 2FA for the user.",
                "parameters": [
                    {"name": "is_2fa_enabled", "type": "boolean", "description": "Indicates whether 2FA should be enabled or disabled."}
                ],
                "response": {
                    "success": {"status": 200, "description": "2FA status toggled successfully.", "data": {"is_2fa_setup_in_progress": "Boolean value indicating if 2FA setup is in progress"}},
                    "errors": [
                        {"status": 400, "description": "Missing 'is_2fa_enabled' parameter."},
                        {"status": 401, "description": "Authentication required."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "ValidationError",
                "description": "Occurs when the 'is_2fa_enabled' parameter is missing.",
                "solution": "Ensure the 'is_2fa_enabled' parameter is provided in the request."
            },
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the user is not authenticated.",
                "solution": "Ensure the user is logged in."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    },
    {
        "view_name": "Verify2FASetupAPIView",
        "description": "Verifies the OTP provided by the user during the 2FA setup process.",
        "methods": [
            {
                "name": "post",
                "description": "Verifies the OTP during the 2FA setup process.",
                "parameters": [
                    {"name": "otp", "type": "string", "description": "One-time password provided by the user."}
                ],
                "response": {
                    "success": {"status": 200, "description": "2FA setup complete, new tokens issued.", "data": {"access_token": "New JWT access token", "refresh_token": "New JWT refresh token"}},
                    "errors": [
                        {"status": 400, "description": "Invalid OTP."},
                        {"status": 400, "description": "2FA is not set up."},
                        {"status": 401, "description": "Authentication required."},
                        {"status": 500, "description": "Unexpected server error."}
                    ]
                }
            }
        ],
        "error_handling": [
            {
                "error": "AuthenticationFailed",
                "description": "Occurs when the OTP is invalid or 2FA is not set up.",
                "solution": "Ensure the OTP is correct and 2FA is set up."
            },
            {
                "error": "Exception",
                "description": "Catches any unexpected errors.",
                "solution": "Log the error details and provide a generic error message to the user."
            }
        ]
    }
]
